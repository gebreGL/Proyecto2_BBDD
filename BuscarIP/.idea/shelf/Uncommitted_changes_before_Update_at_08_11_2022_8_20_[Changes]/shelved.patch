Index: src/main/java/com/example/buscarip/Exports.java
===================================================================
diff --git a/src/main/java/com/example/buscarip/Exports.java b/src/main/java/com/example/buscarip/Exports.java
--- a/src/main/java/com/example/buscarip/Exports.java	
+++ b/src/main/java/com/example/buscarip/Exports.java	
@@ -55,7 +55,6 @@
                 Capital.appendChild(textCapital);
                 ipElement.appendChild(Capital);
                 ipsElement.appendChild(ipElement);
-                documento.getDocumentElement().appendChild(ipsElement);
                 Source source = new DOMSource(documento);
                 Result result = new StreamResult(new File("..\\BuscarIP\\src\\Archivos\\"+IpController.nombreArchivo + ".xml" ));
                 Transformer transformer = TransformerFactory.newInstance().newTransformer();
@@ -69,8 +68,8 @@
     //Método que convierte a formato BIN
     public void convertBin() {
         try (ObjectOutputStream escritor = new ObjectOutputStream(new FileOutputStream("..\\BuscarIP\\src\\Archivos\\"+IpController.nombreArchivo + ".bin"));) {
-            for (int i = 0; i < IpController.ips.size(); i++) {
-                escritor.writeObject(IpController.ips.get(i));
+            for (int i = 0; i < IpController.allIps.size(); i++) {
+                escritor.writeObject(IpController.allIps.get(i));
             }
             System.out.println("Se creó un archivo llamado "+IpController.nombreArchivo+".bin");
         } catch (IOException ex) {
Index: src/main/java/com/example/buscarip/controller/IpController.java
===================================================================
diff --git a/src/main/java/com/example/buscarip/controller/IpController.java b/src/main/java/com/example/buscarip/controller/IpController.java
--- a/src/main/java/com/example/buscarip/controller/IpController.java	
+++ b/src/main/java/com/example/buscarip/controller/IpController.java	
@@ -2,9 +2,6 @@
 
 import com.example.buscarip.Exports;
 import com.example.buscarip.model.*;
-import com.fasterxml.jackson.core.ObjectCodec;
-import com.fasterxml.jackson.core.exc.StreamReadException;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
 import javafx.event.ActionEvent;
@@ -12,21 +9,7 @@
 import javafx.fxml.Initializable;
 import javafx.scene.control.*;
 import javafx.scene.control.cell.PropertyValueFactory;
-import javafx.scene.image.Image;
-import javafx.scene.image.ImageView;
-import org.w3c.dom.DOMImplementation;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Text;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.*;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-import java.io.*;
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.sql.Connection;
 import java.sql.DriverManager;
@@ -34,8 +17,6 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.*;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 public class IpController implements Initializable {
     //La API  que utilizaremos sirve para geolocalizar una IP y saber donde se ubica
@@ -49,18 +30,18 @@
     private  TextField txtNombreArchivo ;
     @FXML
     private ObservableList<Root> tableIps;
-    private ObservableList<Flag> tableIpsBanderas;
     @FXML
     private TableView tableView;
     // Las columnas , son esenciales ya que sin ellas no podremos añadirle valores a la Tabla . En nuestro caso añadiremos una columna de Ip , dirección y Código Postal .
     @FXML
     private TableColumn<Root,String> colDireccion = new TableColumn<>("Direccion");
-    @FXML
-    private TableColumn<Flag,String> colPostal = new TableColumn<>("img");
     @FXML
     private  TableColumn<Root,String> colCiudad = new TableColumn<>("Ciudad");
+    @FXML
+    private  TableColumn<Root,String> colPostal = new TableColumn<>("postal");
     //Arraylist de Ips para guardar todas las Ips que vaya añadiendo el usuario .
-    public static ArrayList<Root> ips = new ArrayList<>();
+    public static ArrayList<Root> allIps = new ArrayList<>();
+    public static ArrayList<Root> ipsSeleccionadas = new ArrayList<>();
     // El observable es como un ArrayList , pero para la clase FX
     public static ArrayList<String> direccionIp = new ArrayList<>() ;
     ObservableList<String> opcionesList ;
@@ -118,22 +99,20 @@
                 String  region = rs.getString("region") ;
                 Double longitude = rs.getDouble("longitud") ;
                 Root ip = new Root( country,  callingCode,  capital,  city,  direccionIp,  latitude,  codePostal,  region , longitude)  ;
-                ips.add(ip);
+                allIps.add(ip);
             }
         } catch (SQLException ex) {
             System.out.println(ex);
-
         }
     //Inicializamos el combobox con valores del Observable y la tabla con ip , city y postal
         opcionesList= FXCollections.observableArrayList(opciones);
         select.setItems(opcionesList);
-        for (int i = 0 ; i < ips.size() ; i ++){
-            direccionIp.add(ips.get(i).getIp());
+        for (int i = 0; i < allIps.size() ; i ++){
+            direccionIp.add(allIps.get(i).getIp());
         }
         ipList= FXCollections.observableArrayList(direccionIp);
         selectIp.setItems(ipList);
         tableIps= FXCollections.observableArrayList();
-        tableIpsBanderas = FXCollections.observableArrayList();
         colDireccion.setCellValueFactory(new PropertyValueFactory("ip"));
         colCiudad.setCellValueFactory(new PropertyValueFactory("city"));
         colPostal.setCellValueFactory(new PropertyValueFactory("postal"));
@@ -141,18 +120,19 @@
     
     public void setIp(ActionEvent actionEvent) {
         String ipSelecionada = selectIp.getValue().toString();
-        for (int i = 0 ; i < ips.size();  i++){
-            if (ipSelecionada.equals(ips.get(i).getIp())){
-                lblCapital.setText(ips.get(i).getCapital());
-                lblLatitud.setText(Double.toString(ips.get(i).getLatitude()));
-                lblPais.setText(ips.get(i).getCountry());
-                lblLongitud.setText(Double.toString(ips.get(i).getLongitude()));
-                lblCodigoPostal.setText(ips.get(i).getPostal());
-                lblCity.setText(ips.get(i).getCity());
-                lblRegion.setText(ips.get(i).getRegion());
-                lblDireccion.setText(ips.get(i).getIp());
-                lblPrefijo.setText(ips.get(i).getCallingCode());
-                tableIps.add(ips.get(i));
+        for (int i = 0; i < allIps.size(); i++){
+            if (ipSelecionada.equals(allIps.get(i).getIp())){
+                ipsSeleccionadas.add(allIps.get(i));
+                lblCapital.setText(allIps.get(i).getCapital());
+                lblLatitud.setText(Double.toString(allIps.get(i).getLatitude()));
+                lblPais.setText(allIps.get(i).getCountry());
+                lblLongitud.setText(Double.toString(allIps.get(i).getLongitude()));
+                lblCodigoPostal.setText(allIps.get(i).getPostal());
+                lblCity.setText(allIps.get(i).getCity());
+                lblRegion.setText(allIps.get(i).getRegion());
+                lblDireccion.setText(allIps.get(i).getIp());
+                lblPrefijo.setText(allIps.get(i).getCallingCode());
+                tableIps.add(allIps.get(i));
                 tableView.setItems(tableIps);
             }
         }
@@ -168,17 +148,16 @@
         if (select.getSelectionModel().getSelectedItem().equals("BIN")){
             export.convertBin();
         }else if (select.getSelectionModel().getSelectedItem().equals("JSON")){
-            export.convertJson(txtNombreArchivo.getText(),ips);
+            export.convertJson(txtNombreArchivo.getText(), ipsSeleccionadas);
         }else if (select.getSelectionModel().getSelectedItem().equals("TXT")){
-            export.convertTXT(txtNombreArchivo.getText(),ips);
+            export.convertTXT(txtNombreArchivo.getText(), ipsSeleccionadas);
         }else if (select.getSelectionModel().getSelectedItem().equals("XML")){
-            export.convertXML(txtNombreArchivo.getText(),ips);
+            export.convertXML(txtNombreArchivo.getText(), ipsSeleccionadas);
         }else if(select.getSelectionModel().getSelectedItem().equals("TODO")){
             export.convertBin();
-            export.convertXML(txtNombreArchivo.getText(),ips);
-            export.convertJson(txtNombreArchivo.getText(),ips);
-            export.convertTXT(txtNombreArchivo.getText(),ips);
-
+            export.convertXML(txtNombreArchivo.getText(), ipsSeleccionadas);
+            export.convertJson(txtNombreArchivo.getText(), ipsSeleccionadas);
+            export.convertTXT(txtNombreArchivo.getText(), ipsSeleccionadas);
         }
         ;
     }
Index: src/main/java/com/example/buscarip/model/Root.java
===================================================================
diff --git a/src/main/java/com/example/buscarip/model/Root.java b/src/main/java/com/example/buscarip/model/Root.java
--- a/src/main/java/com/example/buscarip/model/Root.java	
+++ b/src/main/java/com/example/buscarip/model/Root.java	
@@ -27,20 +27,11 @@
 	@JsonProperty("latitude")
 	private double latitude;
 
-	@JsonProperty("type")
-	private String type;
-
-	@JsonProperty("country_code")
-	private String countryCode;
 
 	@JsonProperty("success")
 	private boolean success;
 
-	@JsonProperty("is_eu")
-	private boolean isEu;
 
-	@JsonProperty("connection")
-	private Connection connection;
 	@JsonProperty("postal")
 	private String postal;
 
@@ -50,12 +41,6 @@
 	@JsonProperty("longitude")
 	private double longitude;
 
-	public Root( String ip, String countryCode, String city) {
-		this.city = city;
-		this.ip = ip;
-		this.countryCode = countryCode;
-	}
-
 
 
 	public String getCountry(){
@@ -88,25 +73,13 @@
 		return latitude;
 	}
 
-	public String getType(){
-		return type;
-	}
 
-	public String getCountryCode(){
-		return countryCode;
-	}
 
 	public boolean isSuccess(){
 		return success;
 	}
 
-	public boolean isIsEu(){
-		return isEu;
-	}
 
-	public Connection getConnection(){
-		return connection;
-	}
 
 	public String getPostal(){
 		return postal;
@@ -128,7 +101,6 @@
 		this.city = city;
 		this.ip = ip;
 		this.latitude = latitude;
-		this.countryCode = countryCode;
 		this.postal = postal;
 		this.region = region;
 		this.longitude = longitude;
@@ -143,10 +115,6 @@
 		this.ip = ip;
 	}
 
-	public void setCountryCode(String countryCode) {
-		this.countryCode = countryCode;
-	}
-
 	@Override
  	public String toString(){
 		return 
@@ -157,11 +125,7 @@
 			",city = '" + city + "\n" +
 			",ip = '" + ip + "\n" +
 			",latitude = '" + latitude + "\n" +
-			",type = '" + type + "\n" +
-			",country_code = '" + countryCode + "\n" +
 			",success = '" + success + "\n" +
-			",is_eu = '" + isEu + "\n" +
-			",connection = '" + connection + "\n" +
 			",postal = '" + postal + "\n" +
 			",region = '" + region + "\n" +
 			",longitude = '" + longitude + "\n" +
